namespace DMv6  
{
    public class DM
    {

        //**********DATOS****************************************************************************************************************************************
        //______________________________________________________________________________________________________________________________________________________

        //VARIABLES MIEMBRO PUBLICAS
        //______________________________________________________________________________________________________________________________________________________

        //ENUMERACIONES DE SELECCION PUBLICAS

        public enum emTConecc { tc_OLDB, tc_ODBC, tc_SQL, tc_MySQL, tc_Excel, tc_Texto };
        public enum emComandoSQL { SELECCION, INSERTAR, ACTUALIZAR, BORRAR };
        public enum emSelectorSQL {
            Ninguno,            //0
            Y,                  //1
            O,                  //2
            Es_Igual_a,         //3
            No_Igual_a,         //4
            Contiene,           //5
            No_Contiene,        //6
            Mayor_Que,          //7
            Menor_Que,          //8
            Mayor_Igual_Que,    //9
            Menor_Igual_Que,    //10
            Comienza_Por,       //11
            No_Comienza_Por,    //12
            Termina_Por,        //13
            No_Termina_Por,     //14
            Es_Entre};          //15
        public enum emPredicadoSQL { TODO, LOS_PRIMEROS_10, DISTINTOS, SIN_DUPLICADOS };
        public enum emOperadorSQL { NINGUNO, SUMA, RESTA, MULTIPLICACION, DIVISION, PROMEDIO, CUENTA, MINIMO, MAXIMO };
        public enum emOrdenSQL {NINGUNO, ASENDENTE, DESENDENTE };
        public enum emTipoDato { tdTexto, tdNumerico, tdFecha_mm_dd_aa, tdCriterio1 };

        //________________________________________________________________________________________________________________________________________________________
        //
        //VARIABLES MIEMBRO PRIVADAS
        //________________________________________________________________________________________________________________________________________________________

        // private OleDbConnection cnnOLDB;   
        //private SqlConnection cnnSQL;
        //private MySqlConnection cnnMySQL;

        private object myCnn; 
        //private ArrayList mTablas = new ArrayList();
        //private ArrayList mCampos = new ArrayList();
        //private ArrayList mValores = new ArrayList();


        //________________________________________________________________________________________________________________________________________________________
        //
        // M E T O D O S
        //________________________________________________________________________________________________________________________________________________________
        //
        //FUNCIONES MIEMBRO PUBLICAS
        //________________________________________________________________________________________________________________________________________________________

      
        public void ConeccionBD(string NombreBaseDatos, emTConecc TipoConeccion = emTConecc.tc_OLDB, string Clave = "", string Usuario = "Admin")
        {

            switch (TipoConeccion)
            {
                case emTConecc.tc_OLDB:
                    myCnn = new OleDbConnection("Provider = Microsoft.ACE.OLEDB.12.0; Password = " + Clave + "; User ID = " + Usuario + "; Data Source = " + NombreBaseDatos);
                    break;
                case emTConecc.tc_ODBC:
                    myCnn = new OdbcConnection();
                    break;
                case emTConecc.tc_SQL:
                    myCnn = new SqlConnection("Provider=MSDASQL.1;Persist Security Info=True;Extended Properties=&quot;DSN=MS Access Database;DBQ=" + NombreBaseDatos); // ";DefaultDir=D:;DriverId=25;FIL=MS Access;MaxBufferSize=2048;PageTimeout=5;&quot;;Initial Catalog=D:\Nuevo Microsoft Access Base de datos.accdb");
                    break;
                case emTConecc.tc_MySQL:
                    myCnn = new MySqlConnection();
                    break;
                case emTConecc.tc_Excel:
                    break;
                case emTConecc.tc_Texto:
                    break;

                default:
                    break;
            }

        }


        //________________________________________________________________________________________________________________________________________________________________________

        //FUNCIONES MIEMBRO PRIVADAS
        //________________________________________________________________________________________________________________________________________________________________________

        //Funciones para manejo de lenguaje SQL

     /*   private string Campos(string Campo,
                              string Valor,
                               "", Optional TDato As emTipoDato = emTipoDato.tdTexto)


    ReDim Preserve mCampo(nC)


    If Campo = "" And Valor = "" Then
        nC = 0
        Erase mCampo()
    Else
        mCampo(nC).mNombre = Campo
        If Valor<> "" Then
           mCampo(nC).Valor = tdValor(Valor, TDato)
            mCampo(nC).TipoDato = TDato
        End If
        nC = nC + 1
   End If
End Sub

      
         * Private Function fConsultaSQL(
         
                          
                            
    Dim mCmmSQL As String
    Dim nCampoSQL As String
    
    nCampoSQL = fCampoSQL(cmmSQL)
    Select Case cmmSQL
        Case emComandoSQL.SELECCION: mCmmSQL = "SELECT " & fPredicadoSQL(Predicado) & fOperadorSQL(Operador, nCampoSQL) & " FROM " & nTabla & " " & fClausulaSQL(CampoC, Selector, ValorC) & " " & fOrdenSQl(Ordenado, CampoORD)
        Case emComandoSQL.INSERTAR: mCmmSQL = "INSERT INTO " & nTabla & nCampoSQL
        Case emComandoSQL.ACTUALIZAR: mCmmSQL = "UPDATE " & nTabla & " SET " & nCampoSQL & fClausulaSQL(CampoC, Selector, ValorC)
        Case emComandoSQL.BORRAR: mCmmSQL = "DELETE *.* FROM " & nTabla & fClausulaSQL(CampoC, Selector, ValorC)
        Case Else: mCmmSQL = ""
    End Select
    fConsultaSQL = mCmmSQL
End Function
         */


        private string fConsultaSQL(emComandoSQL cmmSQL,
                                    string nTabla = "",
                                    string CampoC = "",
                                    string ValorC = "",
                                    emSelectorSQL Selector = emSelectorSQL.Es_Igual_a,
                                    emPredicadoSQL Predicado = emPredicadoSQL.TODO,
                                    emOperadorSQL Operador = emOperadorSQL.NINGUNO,
                                    emOrdenSQL Ordenado=emOrdenSQL.NINGUNO,
                                    string ampoORD="")                                  
                                    
        {
            string myCmmSQL;
            

            switch (cmmSQL)
            {
                case emComandoSQL.SELECCION:  myCmmSQL = "SELECT" + fPredicadoSQL(Predicado) + fOperadorSQL(Operador, Campo) + " FROM " + nTabla + " " + ClausulaSQL(CampoC, Selector, ValorC);
                    break;
                case emComandoSQL.INSERTAR:
                    for (int i = 0; i < mCampos.Count; i++)
                    {
                        lCampo = lCampo + ((lCampo == "") ? "" : ", ") + mCampos[i];
                        lValor = lValor + ((lValor == "") ? "" : ", ") + mValores[i];
                    }
                    myCmmSQL = "INSERT INTO " + nTabla + " (" + lCampo + ") VALUES (" + lValor + ")";
                    break;
                case emComandoSQL.ACTUALIZAR:
                    for (int i = 0; i < mCampos.Count; i++)
                    {
                        lCampo = lCampo + ((lCampo == "") ? "" : ", ") + mCampos[i] + " = " + mValores[i];
                    }
                    myCmmSQL = "UPDATE " + nTabla + " SET " + lCampo + ClausulaSQL(CampoC, Selector, ValorC);
                    break;
                case emComandoSQL.BORRAR:
                    myCmmSQL = "DELETE *.* FROM " + nTabla + ClausulaSQL(CampoC, Selector, ValorC);
                    break;
                default:
                    myCmmSQL = "";
                    break;
            }
            return myCmmSQL;
        }

        private string fPredicadoSQL(emPredicadoSQL TPred)
        {
            /*
            ALL         Devuelve todos los campos de la tabla
            TOP         Devuelve un determinado número de registros de la tabla
            DISTINCT    Omite los registros cuyos campos seleccionados coincidan totalmente
            DISTINCTROW Omite los registros duplicados basandose en la totalidad del registro y no sólo en los campos seleccionados.
            */
        string myTPred;

            switch (TPred)
            {
                case emPredicadoSQL.TODO:  myTPred = " ";
                    break;
                case emPredicadoSQL.LOS_PRIMEROS_10:
                    myTPred = " TOP 10 ";
                    break;
                case emPredicadoSQL.DISTINTOS:
                    myTPred = " DISTINCT ";
                    break;
                case emPredicadoSQL.SIN_DUPLICADOS:
                    myTPred = " DISTINCTROW ";
                    break;
                default:
                    myTPred = " ";
                    break;
            }
            return myTPred;
        }


        private string fOperadorSQL(emOperadorSQL Operador, string Campo)
        {
            string myOP;
            switch (Operador)
            {
                case emOperadorSQL.Suma:
                    myOP = "Sum(" + Campo + ") AS " + Campo;
                    break;
                case emOperadorSQL.Cuenta:
                    myOP = "Count(" + Campo + ") AS " + Campo;
                    break;
                case emOperadorSQL.MAXIMO:
                    myOP = "Max(" + Campo + ") AS " + Campo;
                    break;
                case emOperadorSQL.Minimo:
                    myOP = "Min(" + Campo + ") AS " + Campo;
                    break;
                case emOperadorSQL.Promedio:
                    myOP = "Avg(" + Campo + ") AS " + Campo;
                    break;
                case emOperadorSQL.Resta:
                case emOperadorSQL.Division:
                case emOperadorSQL.Multiplicacion:
                default:
                    myOP = Campo;
                    break;
            }

            return myOP;
        }




        private string ClausulaSQL(string Criterio, emSelector SelectorSQL, string Valor)
        {
            string mySel;

            switch (SelectorSQL)
            {
                case emSelector.Ninguno: //0 
                    mySel = Criterio;
                    break;
                case emSelector.y: // 1 
                    mySel = "((" + Criterio + ") AND (" + Valor + "))";
                    break;
                case emSelector.o: // 2 
                    mySel = "((" + Criterio + ") OR (" + Valor + "))";
                    break;
                case emSelector.Es_Igual_a: //3 
                    mySel = Criterio + " = '" + Valor + "'";
                    break;
                case emSelector.No_Igual_a:  //4 
                    mySel = "NOT ( " + Criterio + " = '" + Valor + "')";
                    break;
                case emSelector.Contiene: //5 
                    mySel = Criterio + " LIKE '*" + Valor + "*'";
                    break;
                case emSelector.No_Contiene: //6
                    mySel = Criterio + " NOT (LIKE '*" + Valor + "*')";
                    break;
                case emSelector.Mayor_Que: //7 
                    mySel = Criterio + " > " + Valor;
                    break;
                case emSelector.Menor_Que: //8 
                    mySel = Criterio + " < " + Valor;
                    break;
                case emSelector.Mayor_Igual_Que: //9 
                    mySel = Criterio + " >= " + Valor;
                    break;
                case emSelector.Menor_Igual_Que: //10 
                    mySel = Criterio + " <= " + Valor;
                    break;
                case emSelector.Comienza_Por: // 11 
                    mySel = Criterio + " LIKE '" + Valor + "*'";
                    break;
                case emSelector.No_Comienza_Por: //12
                    mySel = Criterio + "NOT (LIKE '" + Valor + "*')";
                    break;
                case emSelector.Termina_Por: //13
                    mySel = Criterio + "LIKE '*" + Valor + "'";
                    break;
                case emSelector.No_Termina_Por: //14
                    mySel = Criterio + "NOT (LIKE '*" + Valor + "')";
                    break;
                default:
                    mySel = "";
                    break;
            }

            if (mySel == "") return mySel; else return " WHERE " + mySel;
        }








        public bool Buscar(string nValorBuscado,
                           string nTabla,
                           string nCampo,
                           emSelector nSelector = emSelector.Es_Igual_a,
                           string nBD = "",
                           emTConecc nTCn = emTConecc.Tc_OLDB)
        {
            string myTextoSQL;
            string myDato;
            if (nBD != "") { ConeccionBD(nBD, nTCn); }
            myTextoSQL = fConsultaSQL(emComandoSQL.SELECCION, nCampo, nTabla, nCampo, nValorBuscado, nSelector);
            myDato = EjecutarSQL(myTextoSQL, nCampo, nTCn);
            return (myDato == "") ? true : false;
        }

        public string Leer(string nTextoSQL,
                   string nCampo="",
                   string nBD = "",
                   emTConecc nTCn = emTConecc.Tc_OLDB)
        {
            string myConsSQL;
            if (nCampo !="")
            {
                myConsSQL = EjecutarSQL(nTextoSQL, nCampo, nTCn);
                return myConsSQL;
            }
            else
            {
                EjecutarSQL(nTextoSQL, nTCn);
                return "";
            }
        }

        public string Leer(string nTabla,
                           string nCampo,
                           string nCriterio,
                           emSelector nSelector = emSelector.Es_Igual_a,
                           string nValorC = "",
                           string nBD = "",
                           emTConecc nTCn = emTConecc.Tc_OLDB,
                           emPredicadoSQL nPre = emPredicadoSQL.TODO,
                           emOperadorSQL nOpe = emOperadorSQL.ninguno)
        {
            string myTextoSQL;
            string myConsSQL;

            if (nBD != "") { ConeccionBD(nBD, nTCn); }
            myTextoSQL = fConsultaSQL(emComandoSQL.SELECCION, nCampo, nTabla, nCriterio, nValorC, nSelector, nPre, nOpe);
            myConsSQL = EjecutarSQL(myTextoSQL, nCampo, nTCn);
            return myConsSQL;
        }

        public void Editar(string nCampo = "",
                            string nValor = "",
                            string nTabla = "",
                            string nCriterio = "",
                            string nValorC = "",
                            string nBD = "",
                            emSelector Selector = emSelector.Es_Igual_a,
                            emTConecc nTCn = emTConecc.Tc_OLDB,
                            emTipoDato nTDV = emTipoDato.tdTexto)
        {
            string myTextoSQL;

            if (nCampo != "")
            {
                mCampos.Add(nCampo);
                mValores.Add(tdValor(nValor, nTDV));
            }
            if (nBD != "") { ConeccionBD(nBD, nTCn); }
            if (nTabla != "" & nCriterio == "" & nValorC == "")
            {
                myTextoSQL = fConsultaSQL(emComandoSQL.INSERTAR, nCampo, nTabla);
            }
            else if (nTabla != "" & nCriterio != "" & nValorC != "")
            {
                myTextoSQL = fConsultaSQL(emComandoSQL.ACTUALIZAR, nCampo, nTabla, nCriterio, nValorC, Selector);
            }
        }

        public void Eliminar(string nTabla,
                               string nCriterio,
                               emSelector Selector = emSelector.Es_Igual_a,
                               string nValorC = "",
                               string nBD = "",
                               emTConecc nTCn = emTConecc.Tc_OLDB)
        {
            string myTextoSQL;

            myTextoSQL = fConsultaSQL(emComandoSQL.BORRAR, nTabla: nTabla, Criterio: nCriterio, ValorC: nValorC, SelectorSQL: Selector);
            EjecutarSQL(myTextoSQL,nTCn);
        }


        //Funcion para ingreso de Valores y campos multiples
        private string tdValor(string Valor, emTipoDato TD)
        {
            string myTD;
            switch (TD)
            {
                case emTipoDato.tdTexto:
                    myTD = "'" + Valor + "'";
                    break;
                case emTipoDato.tdFecha_mm_dd_aa:
                    myTD = "#" + Valor + "#";
                    break;
                case emTipoDato.tdNumerico:
                case emTipoDato.tdCriterio1:
                default:
                    myTD = Valor;
                    break;
            }
            return myTD;
        }

        //funcion para ejecutar consultas que devuelven valores simples
       private void EjecutarSQL(string txtSQL, emTConecc TConecc)
        {
            try
            {
                OleDbDataReader myDR;
                OleDbCommand myCmm = new OleDbCommand(txtSQL, cnnOLDB);

                cnnOLDB.Open();
                myDR = myCmm.ExecuteReader();
                cnnOLDB.Close();
            }
            catch (Exception)
            {
                
            }
        }

        private string EjecutarSQL(string txtSQL, string nCampo, emTConecc TConecc)
        {
            string myResSQL;

            try
            {
                OleDbDataReader myDR;
                OleDbCommand myCmm = new OleDbCommand(txtSQL, cnnOLDB);

                cnnOLDB.Open();
                myDR = myCmm.ExecuteReader();
                myDR.Read();
                myResSQL = myDR[nCampo].ToString();
                cnnOLDB.Close();
            }
            catch (Exception)
            {
                myResSQL = "";
            }
            return myResSQL;
        }

        ~DM() //Destructor
        {

        }
         
    }
